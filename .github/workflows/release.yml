on:
  push:
    tags:
      - "v*.*.*"

name: "Release"

jobs:
  crate-info:
    name: "Extract crate info"
    runs-on: "ubuntu-latest"
    outputs:
      version: ${{ steps.derive.outputs.version }}

    steps:
      - id: "derive"
        name: "Derive crate info from Git tag"
        run: |
          FULL_REF="${{ github.ref }}"
          REGEX="^refs\/tags\/v(.*)$"
          [[ $FULL_REF =~ $REGEX ]];

          echo "version=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT

  # Just in case we accidentally release something not on master.
  commit-branch-check:
    name: "Check commit branch"
    runs-on: "ubuntu-latest"
    needs:
      - "crate-info"

    steps:
      - name: "Checkout source code"
        uses: "actions/checkout@v3"
        with:
          fetch-depth: 0

      - name: "Check if commit is on master"
        run: |
          COMMIT_HASH=$(git log -1 --format=%H ${{ github.ref }})
          GREP_OUTPUT=$(git log origin/master --format=%H | grep "$COMMIT_HASH")

          if [ -z "$GREP_OUTPUT" ]; then
            echo "Cannot release commits not on the master branch"
            exit 1
          fi

  crate-version-check:
    name: "Check crate version"
    runs-on: "ubuntu-latest"
    needs:
      - "crate-info"

    steps:
      - name: "Checkout source code"
        uses: "actions/checkout@v3"

      - name: "Check against Cargo.toml"
        run: |
          GREP_OUTPUT=$(cat Cargo.toml | grep "^version = \"${{ needs.crate-info.outputs.version }}\"$")

          if [ -z "$GREP_OUTPUT" ]; then
            echo "Crate version mismatch"
            exit 1
          fi

  draft-release:
    name: "Create draft release"
    runs-on: "ubuntu-latest"
    needs:
      - "crate-info"
      - "commit-branch-check"
      - "crate-version-check"
    outputs:
      release-id: ${{ steps.create.outputs.id }}

    steps:
      - id: "create"
        name: "Create draft release"
        run: |
          ID=$(curl -L --fail "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -d '{"tag_name":"v${{ needs.crate-info.outputs.version }}","name":"v${{ needs.crate-info.outputs.version }}","draft":true,"generate_release_notes":true}' |
            jq ".id")
          echo "id=$ID" >> $GITHUB_OUTPUT

  release-non-apple:
    name: "Build for ${{ matrix.target }}"
    runs-on: "${{ matrix.os }}"
    needs:
      - "crate-info"
      - "draft-release"
      - "commit-branch-check"
      - "crate-version-check"

    strategy:
      matrix:
        include:
          - os: "ubuntu-latest"
            target: "x86_64-unknown-linux-gnu"
            exe: "starkli"
            compressed_ext: "tar.gz"
          - os: "ubuntu-latest"
            target: "x86_64-unknown-linux-musl"
            exe: "starkli"
            compressed_ext: "tar.gz"
          - os: "ubuntu-latest"
            target: "aarch64-unknown-linux-gnu"
            exe: "starkli"
            compressed_ext: "tar.gz"
          - os: "ubuntu-latest"
            target: "aarch64-unknown-linux-musl"
            exe: "starkli"
            compressed_ext: "tar.gz"

          - os: "windows-latest"
            target: "x86_64-pc-windows-msvc"
            exe: "starkli.exe"
            compressed_ext: "zip"

    steps:
      - name: "Checkout source code"
        uses: "actions/checkout@v3"

      - name: "Setup stable toolchain"
        uses: "actions-rs/toolchain@v1"
        with:
          toolchain: "stable"
          profile: "minimal"
          override: true

      - name: "Install cross"
        run: |
          cargo install --locked --version 0.2.5 cross

      - name: "Build release"
        run: |
          cross build --release --target ${{ matrix.target }}

      - name: "Upload artifacts"
        uses: "actions/upload-artifact@v3"
        with:
          name: "starkli-${{ matrix.target }}"
          path: "target/${{ matrix.target }}/release/${{ matrix.exe }}"

      - name: "Tar release"
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release/
          tar zcvf ./starkli-${{ matrix.target }}.tar.gz ./${{ matrix.exe }}

      - name: "Zip release"
        uses: "TheDoctor0/zip-release@0.7.1"
        if: matrix.os == 'windows-latest'
        with:
          type: "zip"
          filename: "starkli-${{ matrix.target }}.zip"
          directory: "target/${{ matrix.target }}/release/"
          path: "${{ matrix.exe }}"

      - name: "Publish compressed artifact"
        shell: "bash"
        run: |
          ARTIFACT_NAME="starkli-${{ matrix.target }}.${{ matrix.compressed_ext }}"

          curl -L --fail "https://uploads.github.com/repos/${GITHUB_REPOSITORY}/releases/${{ needs.draft-release.outputs.release-id }}/assets?name=${ARTIFACT_NAME}" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/octet-stream" \
            --data-binary "@target/${{ matrix.target }}/release/${ARTIFACT_NAME}"

  release-apple:
    name: "Build for ${{ matrix.target }}"
    runs-on: "${{ matrix.os }}"
    needs:
      - "crate-info"
      - "draft-release"
      - "commit-branch-check"
      - "crate-version-check"

    strategy:
      matrix:
        include:
          - os: "macos-latest"
            target: "x86_64-apple-darwin"
            exe: "starkli"
          - os: "macos-latest"
            target: "aarch64-apple-darwin"
            exe: "starkli"

    steps:
      - name: "Checkout source code"
        uses: "actions/checkout@v3"

      - name: "Setup stable toolchain"
        uses: "actions-rs/toolchain@v1"
        with:
          toolchain: "stable"
          profile: "minimal"
          target: "${{ matrix.target }}"
          override: true

      - name: "Apple M1 setup"
        if: ${{ matrix.target == 'aarch64-apple-darwin' }}
        run: |
          echo "SDKROOT=$(xcrun -sdk macosx --show-sdk-path)" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx --show-sdk-platform-version)" >> $GITHUB_ENV

      - name: "Build release"
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: "Upload artifacts"
        uses: "actions/upload-artifact@v3"
        with:
          name: "starkli-${{ matrix.target }}"
          path: "target/${{ matrix.target }}/release/${{ matrix.exe }}"

      - name: "Tar release"
        run: |
          cd target/${{ matrix.target }}/release/
          tar zcvf ./starkli-${{ matrix.target }}.tar.gz ./${{ matrix.exe }}

      - name: "Publish compressed artifact"
        run: |
          ARTIFACT_NAME="starkli-${{ matrix.target }}.tar.gz"

          curl -L --fail "https://uploads.github.com/repos/${GITHUB_REPOSITORY}/releases/${{ needs.draft-release.outputs.release-id }}/assets?name=${ARTIFACT_NAME}" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/octet-stream" \
            --data-binary "@target/${{ matrix.target }}/release/${ARTIFACT_NAME}"

  release-android:
    name: "Build for aarch64-linux-android"
    runs-on: "ubuntu-latest"
    needs:
      - "crate-info"
      - "draft-release"
      - "commit-branch-check"
      - "crate-version-check"

    steps:
      - name: "Checkout source code"
        uses: "actions/checkout@v3"
        with:
          fetch-depth: 0

      - name: "Checkout termux-packages"
        run: |
          cd ..
          git clone https://github.com/termux/termux-packages
          cd termux-packages
          git checkout f193e6f6d1f759f8233ba44bb02a3a45e637bc32

      - name: "Setup local repository"
        run: |
          REPO=$(pwd)
          cd ../termux-packages
          mkdir ./starkli && cd starkli
          git init --bare

          cd $REPO
          git remote set-url origin ../termux-packages/starkli
          git tag v0.0.0
          git push origin v0.0.0

      - name: "Build for aarch64"
        run: |
          cd ../termux-packages
          mkdir ./packages/starkli
          cp ../starkli/build/termux.sh ./packages/starkli/build.sh
          ./scripts/run-docker.sh ./build-package.sh -a aarch64 starkli

      - name: "Extract binary"
        run: |
          REPO=$(pwd)
          mkdir -p target/aarch64-linux-android/release

          cd ../termux-packages/output
          ar x starkli_0.0.0_aarch64.deb
          tar Jxvf data.tar.xz
          mv ./data/data/com.termux/files/usr/bin/starkli $REPO/target/aarch64-linux-android/release

      - name: "Upload artifacts"
        uses: "actions/upload-artifact@v3"
        with:
          name: "starkli-aarch64-linux-android"
          path: "target/aarch64-linux-android/release/starkli"

      - name: "Tar release"
        run: |
          cd target/aarch64-linux-android/release/
          tar zcvf ./starkli-aarch64-linux-android.tar.gz ./starkli

      - name: "Publish compressed artifact"
        run: |
          ARTIFACT_NAME="starkli-aarch64-linux-android.tar.gz"

          curl -L --fail "https://uploads.github.com/repos/${GITHUB_REPOSITORY}/releases/${{ needs.draft-release.outputs.release-id }}/assets?name=${ARTIFACT_NAME}" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/octet-stream" \
            --data-binary "@target/aarch64-linux-android/release/${ARTIFACT_NAME}"

  publish-release:
    name: "Publish release"
    runs-on: "ubuntu-latest"
    needs:
      - "draft-release"
      - "release-non-apple"
      - "release-apple"
      - "release-android"

    steps:
      - name: "Publish release"
        run: |
          curl -L --fail "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/${{ needs.draft-release.outputs.release-id }}" \
            -X PATCH \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -d '{"draft":false}'
